local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Constants = require(ReplicatedStorage:WaitForChild("Constants"))
local MarketplaceService = game:GetService("MarketplaceService")
local player = game.Players.LocalPlayer
local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() 
local Players = game:GetService("Players")
local bleh9274 = Players.LocalPlayer.DisplayName
local success, info = pcall(function()
    return MarketplaceService:GetProductInfo(game.PlaceId)
end)

local gameName = "Unknown Game"
if success and info and info.Name then
    gameName = info.Name
end

local Window = Rayfield:CreateWindow({
   Name = gameName .. " | SYNOLOPE 2 | By Zynlope",
   Icon = 0,
   LoadingTitle = "SYNOLOPE REVIVAL",
   LoadingSubtitle = "discord: plusgiant",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = false,
   KeySettings = {
      Title = "Key System",
      Subtitle = "Access Required",
      Note = "Contact owner for key â€” discord: plusgiant",
      FileName = "zynlope script",
      SaveKey = false,
      GrabKeyFromSite = false,
      Key = {"ngtotheng"}
   },

   Theme = {
      TextColor = Color3.fromRGB(240, 240, 240),
      Background = Color3.fromRGB(15, 15, 15),
      Topbar = Color3.fromRGB(246, 171, 61),
      Shadow = Color3.fromRGB(20, 20, 20),

      NotificationBackground = Color3.fromRGB(15, 15, 15),
      NotificationActionsBackground = Color3.fromRGB(230, 230, 230),

      TabBackground = Color3.fromRGB(20, 20, 20),
      TabStroke = Color3.fromRGB(85, 85, 85),
      TabBackgroundSelected = Color3.fromRGB(246, 171, 61),
      TabTextColor = Color3.fromRGB(240, 240, 240),
      SelectedTabTextColor = Color3.fromRGB(40, 40, 40),

      ElementBackground = Color3.fromRGB(20, 20, 20),
      ElementBackgroundHover = Color3.fromRGB(30, 30, 30),
      SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
      ElementStroke = Color3.fromRGB(38, 38, 38),
      SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
            
      SliderBackground = Color3.fromRGB(50, 138, 220),
      SliderProgress = Color3.fromRGB(50, 138, 220),
      SliderStroke = Color3.fromRGB(58, 163, 255),

      ToggleBackground = Color3.fromRGB(18, 18, 18),
      ToggleEnabled = Color3.fromRGB(246, 171, 61),
      ToggleDisabled = Color3.fromRGB(100, 100, 100),
      ToggleEnabledStroke = Color3.fromRGB(246, 171, 61),
      ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
      ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
      ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),

      DropdownSelected = Color3.fromRGB(20, 20, 20),
      DropdownUnselected = Color3.fromRGB(30, 30, 30),

      InputBackground = Color3.fromRGB(20, 20, 20),
      InputStroke = Color3.fromRGB(65, 65, 65),
      PlaceholderColor = Color3.fromRGB(178, 178, 178)
   }
})

local inviteLink = "https://discord.gg/fTHpFCa8GB"

-- Auto copy invite on load
if setclipboard then
    setclipboard(inviteLink)
elseif toclipboard then
    toclipboard(inviteLink)
else
    print("Clipboard function not supported.")
end

Rayfield:Notify({
    Title = "Thanks for using!",
    Content = "Thanks for using Synolope 2.",
    Duration = 10,
    Image = 4483362458
})

-- Show notification immediately
Rayfield:Notify({
    Title = "Copied!",
    Content = "Discord invite copied:\n" .. inviteLink,
    Duration = 10,
    Image = 4483362458
})

local Tab = Window:CreateTab("Info") 
local Paragraph = Tab:CreateParagraph({Title = "Helpers", Content = "Huge thanks to Fizzy, LethalCoder, w00lin3 for helping me make this script!"})
Tab:CreateParagraph({Title = "Main", Content = "The ACTUAL Script: Synolope. Making everything work again: Zynlope (plusgiant)"})
local Section = Tab:CreateSection("About Zynlope (Contacts)")
local Label = Tab:CreateLabel("Discord: plusgiant")
Tab:CreateLabel("YouTube: zynlope")
Tab:CreateLabel("Rscripts: zynlope")
Tab:CreateLabel("ScriptBlox: zynlopea")
Tab:CreateLabel("TikTok: zynlopea")
Tab:CreateLabel("Telegram: zynlope")

local Tab = Window:CreateTab("Avatar") 

local function gnarp6502(clr)
    return {tostring(clr.R * 255), tostring(clr.G * 255), tostring(clr.B * 255)}
end

local function zibble5019(humdes)
    local ava = {}

    for _, v in pairs({"WidthScale", "HeightScale", "DepthScale", "BodyTypeScale", "ProportionScale", "HeadScale"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"Face", "Head", "LeftArm", "RightArm", "LeftLeg", "RightLeg", "Torso"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"HeadColor", "LeftArmColor", "RightArmColor", "LeftLegColor", "RightLegColor", "TorsoColor"}) do
        ava[v] = gnarp6502(humdes[v])
    end

    for _, v in pairs({"GraphicTShirt", "Shirt", "Pants"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"IdleAnimation", "RunAnimation", "JumpAnimation", "SwimAnimation", "WalkAnimation", "ClimbAnimation", "FallAnimation"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"Hat", "Hair", "Back", "Face", "Front", "Neck", "Shoulders", "Waist"}) do
        ava[v .. "Accessory"] = humdes[v .. "Accessory"]
    end

    local layered = humdes:GetAccessories(false)
    for i, accessory in pairs(layered) do
        if accessory.AccessoryType and typeof(accessory.AccessoryType) == "EnumItem" then
            accessory.AccessoryType = accessory.AccessoryType.Name
        end
        accessory.Order = i
    end
    ava.AccessoryBlob = layered

    ava.Emotes = humdes:GetEmotes()

    return ava
end


local AvatarClipboard = nil
local AvatarClipboardName = "Unnamed"

local Section = Tab:CreateSection("Avatar Clipboard")
Section:Set("Avatar Clipboard")

local function gloob7010(data, name)
    if not data then
        AvatarClipboard = nil
        AvatarClipboardName = "Unnamed"
        Section:Set("Avatar Clipboard")
    else
        AvatarClipboard = data
        AvatarClipboardName = name
        Section:Set("Avatar Clipboard: " .. name)
    end
end

local function zibble3556(player)
    coroutine.wrap(function()
        if player ~= Players.LocalPlayer then
            local function draz9038(character)
                local prox = Instance.new("ProximityPrompt", character:WaitForChild("HumanoidRootPart"))
                prox.ActionText = "Copy Avatar To Clipboard"
                prox.ObjectText = player.DisplayName
                prox.KeyboardKeyCode = Enum.KeyCode.C
                prox.HoldDuration = 0
                prox.RequiresLineOfSight = false
                prox.Triggered:Connect(function()
                    if character and character:FindFirstChild("Humanoid") and character.Humanoid:GetAppliedDescription() then
                        gloob7010(zibble5019(character.Humanoid.HumanoidDescription), player.DisplayName)
                    end
                end)
            end
            draz9038(player.Character or player.CharacterAdded:Wait())
            player.CharacterAdded:Connect(draz9038)
        end
    end)()
end

for _, player in pairs(Players:GetPlayers()) do
    zibble3556(player)
end
Players.PlayerAdded:Connect(zibble3556)

local Button = Tab:CreateButton({
    Name = "Copy Current Avatar",
    Callback = function()
        local player = Players.LocalPlayer
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") and character.Humanoid:FindFirstChild("HumanoidDescription") then
            gloob7010(zibble5019(character.Humanoid.HumanoidDescription), player.DisplayName)
        end
    end
})

Tab:CreateButton({
    Name = "Load Avatar",
    Callback = function()
        if AvatarClipboard then
            game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(AvatarClipboard)
        end
    end
})

Tab:CreateButton({
    Name = "Save Avatar",
    Callback = function()
        if AvatarClipboard then
            local broadcastArgs = {
                [1] = "ZYNLOPE", 
                [2] = Enum.TextFilterContext.PublicChat
            }

            local functionConns = game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9)

            functionConns:WaitForChild("RequestBroadcastString", 9e9):InvokeServer(unpack(broadcastArgs))

            local saveArgs = {
                [1] = AvatarClipboard
            }

            functionConns:WaitForChild("NewAESaveOutfit", 9e9):InvokeServer(unpack(saveArgs))

         Rayfield:Notify({
                Title = "Avatar Saver",
                Content = "Avatar has been saved to Outfits. ",
                Duration = 3,
            })

        else
            Rayfield:Notify({
                Title = "Avatar Saver",
                Content = "No avatars in clipboard. ",
                Duration = 3,
            })
        end
    end
})

Tab:CreateDivider()

Tab:CreateButton({
    Name = "Reset To Roblox Avatar",
    Callback = function()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

        local player = Players.LocalPlayer
        local userId = player.UserId

        local success, description = pcall(function()
            return Players:GetHumanoidDescriptionFromUserId(userId)
        end)

        if success and description then
            local data = zibble5019(description)
            ReplicatedStorage.FunctionConnections.NewAESaveAvatar:InvokeServer(data)
        else
            warn("Failed to get HumanoidDescription.")
        end
    end
})

local LoadAvatarFromUserId = Tab:CreateInput({
   Name = "Load Avatar From UserId",
   CurrentValue = "",
   PlaceholderText = "enter userid",
   RemoveTextAfterFocusLost = false,
   Flag = "LoadAvatarUserId",
   Callback = function(userid)
      if userid and tonumber(userid) and Players:GetHumanoidDescriptionFromUserId(tonumber(userid)) then
         local data = zibble5019(Players:GetHumanoidDescriptionFromUserId(tonumber(userid)))
        game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(data)
      end
   end,
})

local LoadAvatarFromUsername = Tab:CreateInput({
   Name = "Load Avatar From Username",
   CurrentValue = "",
   PlaceholderText = "enter username",
   RemoveTextAfterFocusLost = false,
   Flag = "LoadAvatarUsername",
   Callback = function(username)
      if username and Players:GetUserIdFromNameAsync(username) then
         local data = zibble5019(Players:GetHumanoidDescriptionFromUserId(Players:GetUserIdFromNameAsync(username)))
          game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(data)
      end
   end,
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Clipboard = setclipboard or toclipboard

Tab:CreateInput({
    Name = "Find Username (from server)",
    PlaceholderText = "enter displayname",
    RemoveTextAfterFocusLost = false,
    Callback = function(inputText)
        local match = nil
        inputText = inputText:lower()
        
        for _, player in pairs(Players:GetPlayers()) do
            if player.DisplayName:lower():find(inputText) then
                match = player
                break
            end
        end

        if match then
            if Clipboard then
                Clipboard(match.Name)
            end

            Rayfield:Notify({
                Title = "Username Copied!",
                Content = "Copied: " .. match.Name,
                Duration = 5,
            })
        else
            Rayfield:Notify({
                Title = "Player Not Found",
                Content = "No display name matched '" .. inputText .. "'",
                Duration = 5,
            })
        end
    end,
})

Tab:CreateSection("Fun")

local LocalPlayer = Players.LocalPlayer
Tab:CreateToggle({
    Name = "Fake ZZZ",
    CurrentValue = false,
    Flag = "ToggleExample",
    Callback = function(Value)
        LocalPlayer:SetAttribute("AFKToggled", Value)
    end,
})

Tab:CreateToggle({
    Name = "Enable Busy Mode",
    CurrentValue = false,
    Flag = "ToggleExample",
    Callback = function(Value)
        LocalPlayer:SetAttribute("IsBusy", Value)
    end,
})

local Button = Tab:CreateButton({
   Name = "Big Head",
   Callback = function()
local args = {
    [1] = {
        ["DepthScale"] = 1;
        ["HeadScale"] = 999;
        ["HeightScale"] = 1;
    };
}

game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9):WaitForChild("NewAESaveAvatar", 9e9):InvokeServer(unpack(args))
   end,
})

local Button = Tab:CreateButton({
   Name = "Small Head",
   Callback = function()
local args = {
    [1] = {
        ["DepthScale"] = 1;
        ["HeadScale"] = 0;
        ["HeightScale"] = 1;
    };
}
game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9):WaitForChild("NewAESaveAvatar", 9e9):InvokeServer(unpack(args))
   end,
})

local Button = Tab:CreateButton({
   Name = "Huge Scales",
   Callback = function()
local args = {
    [1] = {
        ["DepthScale"] = 9999;
        ["HeadScale"] = 9999;
        ["HeightScale"] = 9999;
        ["BodyTypeScale"] = 9999;
        ["HeightScale"] = 9999;
        ["ProportionScale"] = 9999;
        ["WidthScale"] = 9999;
    };
}
game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9):WaitForChild("NewAESaveAvatar", 9e9):InvokeServer(unpack(args))
   end,
})

local Button = Tab:CreateButton({
   Name = "Small Scales",
   Callback = function()
local args = {
    [1] = {
        ["DepthScale"] = 0;
        ["HeadScale"] = 0;
        ["HeightScale"] = 0;
        ["BodyTypeScale"] = 0;
        ["HeightScale"] = 0;
        ["ProportionScale"] = 0;
        ["WidthScale"] = 0;
    };
}
game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9):WaitForChild("NewAESaveAvatar", 9e9):InvokeServer(unpack(args))
   end,
})

Tab:CreateDivider()

Tab:CreateButton({
   Name = "Loop Animation",
   Callback = function()
game.Players.LocalPlayer.Character.Animate.Disabled = true
   end,
})

Tab:CreateButton({
   Name = "Unloop Animation",
   Callback = function()
game.Players.LocalPlayer.Character.Animate.Disabled = false
   end,
})

Tab:CreateInput({
   Name = "Animation Speed",
   CurrentValue = "",
   PlaceholderText = "enter speed",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(value)
     local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(value)
    end
   end,
})

Tab:CreateButton({
   Name = "Double speed",
   Callback = function()
 local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(v.Speed * 2)
    end
   end,
})

Tab:CreateButton({
   Name = "Decrease speed",
   Callback = function()
local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(v.Speed * 0.5)
    end
   end,
})

local Tab = Window:CreateTab("Avatar Editor")

local args = {
    [1] = {
        ["HatAccessory"] = "",
        ["HairAccessory"] = "",
        ["BackAccessory"] = "",
        ["FaceAccessory"] = "",
        ["Shirt"] = "",
        ["Pants"] = "",
        ["Face"] = "",
        ["GraphicTShirt"] = ""
    }
}

local function invokeSaveAvatar()
    game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
end

Tab:CreateSection("Equip any item by inserting their id.")

-- HatAccessory (append IDs)
Tab:CreateInput({
    Name = "Hat Accessory",
    CurrentValue = "",
    PlaceholderText = "Enter HatAccessory ID",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text and Text ~= "" then
            local current = args[1]["HatAccessory"]
            local idList = current ~= "" and current:split(",") or {}
            table.insert(idList, Text)
            args[1]["HatAccessory"] = table.concat(idList, ",")
            print("Updated HatAccessory:", args[1]["HatAccessory"])
            invokeSaveAvatar()
        end
    end
})

-- HairAccessory
Tab:CreateInput({
    Name = "Hair Accessory",
    CurrentValue = "",
    PlaceholderText = "Enter HairAccessory ID",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text and Text ~= "" then
            args[1]["HairAccessory"] = Text
            print("Updated HairAccessory:", args[1]["HairAccessory"])
            invokeSaveAvatar()
        end
    end
})

-- BackAccessory
Tab:CreateInput({
    Name = "Back Accessory",
    CurrentValue = "",
    PlaceholderText = "Enter BackAccessory ID",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text and Text ~= "" then
            args[1]["BackAccessory"] = Text
            print("Updated BackAccessory:", args[1]["BackAccessory"])
            invokeSaveAvatar()
        end
    end
})

-- FaceAccessory
Tab:CreateInput({
    Name = "Face Accessory",
    CurrentValue = "",
    PlaceholderText = "Enter FaceAccessory ID",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text and Text ~= "" then
            args[1]["FaceAccessory"] = Text
            print("Updated FaceAccessory:", args[1]["FaceAccessory"])
            invokeSaveAvatar()
        end
    end
})

-- Shirt
Tab:CreateInput({
    Name = "Shirt",
    CurrentValue = "",
    PlaceholderText = "Enter Shirt ID",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text and Text ~= "" then
            args[1]["Shirt"] = Text
            print("Updated Shirt:", args[1]["Shirt"])
            invokeSaveAvatar()
        end
    end
})

-- GraphicTShirt
Tab:CreateInput({
    Name = "T-Shirt",
    CurrentValue = "",
    PlaceholderText = "Enter TShirt ID",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text and Text ~= "" then
            args[1]["GraphicTShirt"] = Text
            print("Updated GraphicTShirt:", args[1]["GraphicTShirt"])
            invokeSaveAvatar()
        end
    end
})

-- Pants
Tab:CreateInput({
    Name = "Pants",
    CurrentValue = "",
    PlaceholderText = "Enter Pants ID",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text and Text ~= "" then
            args[1]["Pants"] = Text
            print("Updated Pants:", args[1]["Pants"])
            invokeSaveAvatar()
        end
    end
})

-- Face
Tab:CreateInput({
    Name = "Face",
    CurrentValue = "",
    PlaceholderText = "Enter Face ID",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text and Text ~= "" then
            args[1]["Face"] = Text
            print("Updated Face:", args[1]["Face"])
            invokeSaveAvatar()
        end
    end
})

local Tab = Window:CreateTab("Server") 

Tab:CreateSection("Server Joiner")

Tab:CreateButton({
    Name = "Join Most Populated Server",
    Callback = function()
   local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local PlaceId = game.PlaceId
local cursor = nil
local mostPlayers = 0
local selectedServer = nil

repeat
    local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Desc&limit=100"
    if cursor then
        url = url .. "&cursor=" .. cursor
    end
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(url))
    end)

    if success and result and result.data then
        for _, server in ipairs(result.data) do
            local playerCount = server.playing or 0
            if playerCount > mostPlayers and server.id ~= game.JobId then
                mostPlayers = playerCount
                selectedServer = server.id
            end
        end
        cursor = result.nextPageCursor
    else
        break
    end
until not cursor

if selectedServer then
    TeleportService:TeleportToPlaceInstance(PlaceId, selectedServer, Players.LocalPlayer)
else
    warn("No server found.")
end

    end
})

Tab:CreateButton({
    Name = "Join Least Populated Server",
    Callback = function()
     local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local PlaceId = game.PlaceId
local cursor = nil
local leastPlayers = math.huge
local selectedServer = nil

repeat
    local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
    if cursor then
        url = url .. "&cursor=" .. cursor
    end
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(url))
    end)

    if success and result and result.data then
        for _, server in ipairs(result.data) do
            local playerCount = server.playing or 0
            if playerCount < leastPlayers and server.id ~= game.JobId and playerCount > 0 then
                leastPlayers = playerCount
                selectedServer = server.id
            end
        end
        cursor = result.nextPageCursor
    else
        break
    end
until not cursor

if selectedServer then
    TeleportService:TeleportToPlaceInstance(PlaceId, selectedServer, Players.LocalPlayer)
else
    warn("No server found.")
end

    end
})

Tab:CreateButton({
    Name = "Join Random Server",
    Callback = function()
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local PlaceId = game.PlaceId
local cursor = nil
local allServers = {}

repeat
    local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?limit=100"
    if cursor then
        url = url .. "&cursor=" .. cursor
    end

    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(url))
    end)

    if success and result and result.data then
        for _, server in ipairs(result.data) do
            if server.id ~= game.JobId and server.playing < server.maxPlayers then
                table.insert(allServers, server.id)
            end
        end
        cursor = result.nextPageCursor
    else
        warn("Failed to get server list.")
        break
    end
until not cursor

if #allServers > 0 then
    local randomServerId = allServers[math.random(1, #allServers)]
    TeleportService:TeleportToPlaceInstance(PlaceId, randomServerId, Players.LocalPlayer)
else
    warn("No available servers to join.")
end
    end
})

Tab:CreateButton({
   Name = "Rejoin",
   Callback = function()
 game:GetService("TeleportService"):Teleport(game.PlaceId)
	 wait()
 
 wait();
 end,
})


Tab:CreateButton({
    Name = "Open Server GUI",
    Callback = function()
local serverbrowsermodule = require(game.Players.LocalPlayer.PlayerGui:WaitForChild("ServerBrowserGui"):WaitForChild("ServerBrowserGUI"))
	serverbrowsermodule.Open()
    end
})

Tab:CreateButton({
   Name = "Unban voice chat",
   Callback = function()
game:GetService("VoiceChatService"):joinVoice()
 end,
})

local Section = Tab:CreateSection("backyard teleporter")


local Input = Tab:CreateInput({
   Name = "Enter User ID",
   CurrentValue = "",
   PlaceholderText = "Type User ID here...",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
      
      _G.idstoring = tonumber(Text) 
   end,
})


local Button = Tab:CreateButton({
   Name = "Teleport to backyard CREDITS: SEMNEXO",
   Callback = function()
      if _G.idstoring then
         local success, err = pcall(function()
            ReplicatedStorage.FunctionConnections.RequestTeleportToBackyard:InvokeServer(_G.idstoring)
         end)

         game.StarterGui:SetCore("SendNotification", {
            Title = success and "Success!" or "Error!",
            Text = success and "Teleported successfully!" or "Teleport failed!",
            Duration = 3
         })
      else
         game.StarterGui:SetCore("SendNotification", {
            Title = "Error!",
            Text = "Invalid User ID! Please enter a valid ID.",
            Duration = 3
         })
      end
   end,
})

local Players = game:GetService("Players")


local UsernameInput = Tab:CreateInput({
   Name = "Enter Username",
   CurrentValue = "",
   PlaceholderText = "Type username here...",
   RemoveTextAfterFocusLost = false,
   Flag = "UsernameInput",
   Callback = function(Text)
      _G.userstoring = Text 
   end,
})


local CopyButton = Tab:CreateButton({
   Name = "Get & Copy User ID",
   Callback = function()
      if _G.userstoring and _G.userstoring ~= "" then
         local success, userId = pcall(function()
            return Players:GetUserIdFromNameAsync(_G.userstoring)
         end)

         if success and userId then
            setclipboard(tostring(userId)) 
            game.StarterGui:SetCore("SendNotification", {
               Title = "User ID Copied!",
               Text = "User ID: " .. userId,
               Duration = 3
            })
         else
            game.StarterGui:SetCore("SendNotification", {
               Title = "User Not Found!",
               Text = "Check the username and try again.",
               Duration = 3
            })
         end
      else
         game.StarterGui:SetCore("SendNotification", {
            Title = "Error!",
            Text = "Please enter a username.",
            Duration = 3
         })
      end
   end,
})

local Divider = Tab:CreateDivider()

local Tab = Window:CreateTab("Server Info")
local PlusLabel = Tab:CreateLabel("PLUS GAMEPASS: 0")
local BoomboxLabel = Tab:CreateLabel("BOOMBOX GAMEPASS: 0")

local function countAttributes()
    local plusCount = 0
    local boomboxCount = 0

    for _, player in ipairs(Players:GetPlayers()) do
        if player:GetAttribute("PLUS") then
            plusCount += 1
        end
        if player:GetAttribute("BoomBox") then
            boomboxCount += 1
        end
    end

    PlusLabel:Set("PLUS GAMEPASS OWNERS: " .. plusCount)
    BoomboxLabel:Set("BOOMBOX GAMEPASS OWNERS: " .. boomboxCount)
end

countAttributes()

Players.PlayerAdded:Connect(function(player)
    player:GetPropertyChangedSignal("Parent"):Connect(countAttributes)

    player.AttributeChanged:Connect(function()
        countAttributes()
    end)

    task.wait(1)
    countAttributes()
end)

Players.PlayerRemoving:Connect(function()
    task.defer(countAttributes)
end)

for _, player in ipairs(Players:GetPlayers()) do
    player.AttributeChanged:Connect(function()
        countAttributes()
    end)
end

Tab:CreateDivider()

local Players = game:GetService("Players")

local selectedPlayer = nil

local SelectedLabel = Tab:CreateLabel("Selected: None")
local CoinsLabel = Tab:CreateLabel("(@None): Coins: 0")

local function getPlayerByPartialName(partial)
    partial = partial:lower()
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Name:lower():sub(1, #partial) == partial then
            return player
        end
        if player.DisplayName:lower():sub(1, #partial) == partial then
            return player
        end
    end
    return nil
end

local function updateCoinLabel()
    if selectedPlayer and selectedPlayer.Parent == Players then
        local coins = selectedPlayer:GetAttribute("Coins") or 0
        CoinsLabel:Set("(@" .. selectedPlayer.DisplayName .. "): Coins: " .. coins)
    else
        CoinsLabel:Set("(@None): Coins: 0")
    end
end

local Input = Tab:CreateInput({
    Name = "Select Player (Display/User can be shortened)",
    CurrentValue = "",
    PlaceholderText = "Enter name or display...",
    RemoveTextAfterFocusLost = false,
    Flag = "PlayerSelector",
    Callback = function(Text)
        local found = getPlayerByPartialName(Text)
        if found then
            selectedPlayer = found
            SelectedLabel:Set("Selected: " .. found.Name .. " (@" .. found.DisplayName .. ")")
            updateCoinLabel()
            found:GetAttributeChangedSignal("Coins"):Connect(function()
                updateCoinLabel()
            end)
        else
            selectedPlayer = nil
            SelectedLabel:Set("Selected: None")
            CoinsLabel:Set("(@None): Coins: 0")
        end
    end,
})

task.spawn(function()
    while true do
        updateCoinLabel()
        task.wait(1)
    end
end)

Tab:CreateDivider()

local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = function() return LocalPlayer.Character end

local following = false
local followConnection

Tab:CreateButton({
    Name = "Go to Selected Player",
    Callback = function()
        if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = Character():FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = selectedPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
            end
        end
    end,
})

Tab:CreateButton({
    Name = "Tween to Selected Player",
    Callback = function()
        if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = Character():FindFirstChild("HumanoidRootPart")
            if hrp then
                local goal = {CFrame = selectedPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)}
                local tween = TweenService:Create(hrp, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), goal)
                tween:Play()
            end
        end
    end,
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local behindFollow = false

Tab:CreateToggle({
    Name = "Follow Behind Player",
    CurrentValue = false,
    Flag = "FollowBehindToggle",
    Callback = function(Value)
        behindFollow = Value
        if Value then
            task.spawn(function()
                while behindFollow and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    local root = Character:FindFirstChild("HumanoidRootPart")
                    local targetRoot = selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if root and targetRoot then
                        local offset = targetRoot.CFrame.LookVector * -3
                        root.CFrame = CFrame.new(targetRoot.Position + offset, targetRoot.Position)
                    end
                    task.wait(0.1)
                end
            end)
        end
    end,
})

local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = function() return LocalPlayer.Character end
local Humanoid = function() return Character() and Character():FindFirstChildOfClass("Humanoid") end
local AnimController = {}
local followConnection, floatConnection, spinConnection = nil, nil, nil

local function playCurrentAnimation()
    local humanoid = Humanoid()
    if humanoid then
        local playingTracks = humanoid:GetPlayingAnimationTracks()
        for _, track in ipairs(playingTracks) do
            if track.IsPlaying then
                track:Stop()
                task.wait()
                track:Play()
                break
            end
        end
    end
end

Tab:CreateToggle({
    Name = "Float Around Selected Player",
    CurrentValue = false,
    Callback = function(state)
        if floatConnection then
            floatConnection:Disconnect()
            floatConnection = nil
        end

        if state and selectedPlayer and selectedPlayer.Character then
            playCurrentAnimation()
            local angle = 0
            floatConnection = RunService.Heartbeat:Connect(function()
                if not selectedPlayer or not selectedPlayer.Character then return end
                local target = selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
                local me = Character() and Character():FindFirstChild("HumanoidRootPart")
                if not target or not me then return end

                angle += math.rad(2)
                local radius = 5
                local offset = Vector3.new(math.cos(angle) * radius, 2.5, math.sin(angle) * radius)
                me.CFrame = CFrame.new(target.Position + offset, target.Position)
            end)
        end
    end,
})

local LocalPlayer = Players.LocalPlayer
local spinAround = false
local spinRadius = 5
local spinSpeed = math.rad(120) -- radians per second (120 deg/sec)
local angle = 0

local connection

Tab:CreateToggle({
    Name = "Spin Around Selected Player",
    CurrentValue = false,
    Flag = "SpinAroundToggleSmooth",
    Callback = function(Value)
        spinAround = Value

        if spinAround then
            angle = 0
            connection = RunService.RenderStepped:Connect(function(dt)
                local character = LocalPlayer.Character
                local root = character and character:FindFirstChild("HumanoidRootPart")
                local target = selectedPlayer
                local targetRoot = target and target.Character and target.Character:FindFirstChild("HumanoidRootPart")

                if root and targetRoot then
                    angle = (angle + spinSpeed * dt) % (2 * math.pi)
                    local offset = Vector3.new(math.cos(angle) * spinRadius, 0, math.sin(angle) * spinRadius)
                    local desiredCFrame = CFrame.new(targetRoot.Position + offset, targetRoot.Position)
                    -- Smoothly interpolate to the desired position
                    root.CFrame = root.CFrame:Lerp(desiredCFrame, 0.2)
                end
            end)
        else
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end,
})

local Tab = Window:CreateTab("Items")

Tab:CreateSection("Spam Items")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Button = Tab:CreateButton({
   Name = "Firework (Manual)",
   Callback = function()
 game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
        game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
        game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
   end,
})

local fws = false 
local fwloop 

local Toggle = Tab:CreateToggle({
   Name = "Spawn Fireworks (Normal)",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(value)
   fws = value
		if fws then
			
			fwloop = coroutine.create(function()
				while fws do
					game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
					game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
					game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
					wait(1.5) 
				end
			end)
			coroutine.resume(fwloop)
		else
			
			fws = false
		end
   end,
})


 local running = false
    local loopThread
    local steppedConnection
    local Connection = ReplicatedStorage:WaitForChild("Connection")
    local ConnectionEvent = ReplicatedStorage:WaitForChild("ConnectionEvent")
    local RunService = game:GetService("RunService")

    local function chonk8445()
        while running do
            Connection:InvokeServer(202, 1310, {Position = Vector3.new(0, -15, 100)})
            Connection:InvokeServer(201, 1310, {})
            task.wait(1.5)
        end
    end

    Tab:CreateToggle({
        Name = "Multi Spam Fireworks (Best)",
        CurrentValue = false,
        Flag = "Toggle1",
        Callback = function(value)
            running = value

            if running then
                loopThread = task.spawn(function()
                    chonk8445()
                end)

                steppedConnection = RunService.Stepped:Connect(function()
                    if running then
                        ConnectionEvent:FireServer(210)
                    end
                end)
            else
                if steppedConnection then
                    steppedConnection:Disconnect()
                    steppedConnection = nil
                end
            end
        end
    })

local Players = game:GetService("Players")

Tab:CreateToggle({
   Name = "Spam turkey", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        turkeys = value
        if turkeys then
            spawn(function()
                while turkeys do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 687,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 687 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            turkeys = false
        end
    end,
})

Tab:CreateToggle({
   Name = "Spam pizza plate", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        plates = value
        if plates then
            spawn(function()
                while plates do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 685,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 685 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            plates = false
        end
    end,
})

Tab:CreateSection("Give/Throw")

Tab:CreateButton({
   Name = "Give snowball all (BUGGY)",
   Callback = function()
     local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local isRunning = false 

local function gnarp6537()
    local equipArgs = {201, 932}
    local success, result = pcall(function()
        ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(equipArgs))
    end)
    if not success then
        warn("Equip item failed:", result)
    end
end

local function schlawg4674()
    local args = {
        [1] = 202,
    }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(args))
    end)
end

local function bluh1686(player)
    local equippedItems = player:FindFirstChild("Backpack"):FindFirstChild(932)
    return equippedItems ~= nil
end

local function draz9945()
    for _, player in pairs(Players:GetPlayers()) do
        if not bluh1686(player) then
            local giveArgs = {player.UserId, 932}
            local success, result = pcall(function()
                ReplicatedStorage:WaitForChild("FunctionConnections"):WaitForChild("RequestSendPassAlongActionItem"):InvokeServer(unpack(giveArgs))
            end)
            if not success then
                warn("Give item failed for " .. player.Name .. ":", result)
            end
        end
    end
end

while true do
    if not isRunning then
        isRunning = true
        
        gnarp6537()
        draz9945()
        schlawg4674()
        
        isRunning = false
    else
        wait(1)
    end
    wait(2)
end

   end,
})

Tab:CreateButton({
   Name = "Throw snowball all",
   Callback = function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local ThrowItemEvent = ReplicatedStorage.EventConnections.ThrowItem
local RunService = game:GetService("RunService")

local function zorp1387()
    local allPlayers = Players:GetPlayers()
    local randomIndex = math.random(1, #allPlayers)
    local randomPlayer = allPlayers[randomIndex]
    if randomPlayer and randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return randomPlayer
    else
        return nil
    end
end

local function snarp5845()
    local randomPlayer = zorp1387()
    if randomPlayer then
        local targetPosition = randomPlayer.Character.HumanoidRootPart.Position
        local args = {
            [1] = string.format("[932,[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],75]",
                tostring(targetPosition.X), tostring(targetPosition.Y), tostring(targetPosition.Z),
                tostring(targetPosition.X + 3), tostring(targetPosition.Y + 3), tostring(targetPosition.Z + 3),
                tostring(targetPosition.X - 3), tostring(targetPosition.Y - 3), tostring(targetPosition.Z - 3))
        }
        ThrowItemEvent:FireServer(unpack(args))
    end
end

RunService.Heartbeat:Connect(function()
    for _ = 1, 1 do
        snarp5845()
    end
end)
   end,
})

Tab:CreateDivider()

Tab:CreateButton({
   Name = "Give golden egg all (BUGGY)",
   Callback = function()
       local Players = game:GetService("Players")
       local ReplicatedStorage = game:GetService("ReplicatedStorage")

       local isRunning = false 

       local function gnarp6537()
           local equipArgs = {201, 1122} -- changed from 932 to 1122
           local success, result = pcall(function()
               ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(equipArgs))
           end)
           if not success then
               warn("Equip item failed:", result)
           end
       end

       local function schlawg4674()
           local args = {
               [1] = 202,
           }
           pcall(function()
               ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(args))
           end)
       end

       local function bluh1686(player)
           local equippedItems = player:FindFirstChild("Backpack") and player.Backpack:FindFirstChild("1122")
           return equippedItems ~= nil
       end

       local function draz9945()
           for _, player in pairs(Players:GetPlayers()) do
               if not bluh1686(player) then
                   local giveArgs = {player.UserId, 1122} -- changed from 932 to 1122
                   local success, result = pcall(function()
                       ReplicatedStorage:WaitForChild("FunctionConnections"):WaitForChild("RequestSendPassAlongActionItem"):InvokeServer(unpack(giveArgs))
                   end)
                   if not success then
                       warn("Give item failed for " .. player.Name .. ":", result)
                   end
               end
           end
       end

       while true do
           if not isRunning then
               isRunning = true
               
               gnarp6537()
               draz9945()
               schlawg4674()
               
               isRunning = false
           else
               wait(1)
           end
           wait(2)
       end
   end,
})

Tab:CreateButton({
   Name = "Throw golden egg all",
   Callback = function()
       local ReplicatedStorage = game:GetService("ReplicatedStorage")
       local Players = game:GetService("Players")
       local ThrowItemEvent = ReplicatedStorage.EventConnections.ThrowItem
       local RunService = game:GetService("RunService")

       local function zorp1387()
           local allPlayers = Players:GetPlayers()
           local randomIndex = math.random(1, #allPlayers)
           local randomPlayer = allPlayers[randomIndex]
           if randomPlayer and randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart") then
               return randomPlayer
           else
               return nil
           end
       end

       local function snarp5845()
           local randomPlayer = zorp1387()
           if randomPlayer then
               local targetPosition = randomPlayer.Character.HumanoidRootPart.Position
               local args = {
                   [1] = string.format("[1122,[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],75]", -- changed from 932 to 1122
                       tostring(targetPosition.X), tostring(targetPosition.Y), tostring(targetPosition.Z),
                       tostring(targetPosition.X + 3), tostring(targetPosition.Y + 3), tostring(targetPosition.Z + 3),
                       tostring(targetPosition.X - 3), tostring(targetPosition.Y - 3), tostring(targetPosition.Z - 3))
               }
               ThrowItemEvent:FireServer(unpack(args))
           end
       end

       RunService.Heartbeat:Connect(function()
           for _ = 1, 1 do
               snarp5845()
           end
       end)
   end,
})
Tab:CreateDivider()
Tab:CreateButton({
   Name = "Give egg all (BUGGY)",
   Callback = function()
       local Players = game:GetService("Players")
       local ReplicatedStorage = game:GetService("ReplicatedStorage")

       local isRunning = false 

       local function gnarp6537()
           local equipArgs = {201, 602} -- changed to 602
           local success, result = pcall(function()
               ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(equipArgs))
           end)
           if not success then
               warn("Equip item failed:", result)
           end
       end

       local function schlawg4674()
           local args = {
               [1] = 202,
           }
           pcall(function()
               ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(args))
           end)
       end

       local function bluh1686(player)
           local equippedItems = player:FindFirstChild("Backpack") and player.Backpack:FindFirstChild("602") -- changed to 602
           return equippedItems ~= nil
       end

       local function draz9945()
           for _, player in pairs(Players:GetPlayers()) do
               if not bluh1686(player) then
                   local giveArgs = {player.UserId, 602} -- changed to 602
                   local success, result = pcall(function()
                       ReplicatedStorage:WaitForChild("FunctionConnections"):WaitForChild("RequestSendPassAlongActionItem"):InvokeServer(unpack(giveArgs))
                   end)
                   if not success then
                       warn("Give item failed for " .. player.Name .. ":", result)
                   end
               end
           end
       end

       while true do
           if not isRunning then
               isRunning = true
               
               gnarp6537()
               draz9945()
               schlawg4674()
               
               isRunning = false
           else
               wait(1)
           end
           wait(2)
       end
   end,
})

local Button = Tab:CreateButton({
   Name = "Throw egg all",
   Callback = function()
       local ReplicatedStorage = game:GetService("ReplicatedStorage")
       local Players = game:GetService("Players")
       local ThrowItemEvent = ReplicatedStorage.EventConnections.ThrowItem
       local RunService = game:GetService("RunService")

       local function zorp1387()
           local allPlayers = Players:GetPlayers()
           local randomIndex = math.random(1, #allPlayers)
           local randomPlayer = allPlayers[randomIndex]
           if randomPlayer and randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart") then
               return randomPlayer
           else
               return nil
           end
       end

       local function snarp5845()
           local randomPlayer = zorp1387()
           if randomPlayer then
               local targetPosition = randomPlayer.Character.HumanoidRootPart.Position
               local args = {
                   [1] = string.format("[602,[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],75]", -- changed to 602
                       tostring(targetPosition.X), tostring(targetPosition.Y), tostring(targetPosition.Z),
                       tostring(targetPosition.X + 3), tostring(targetPosition.Y + 3), tostring(targetPosition.Z + 3),
                       tostring(targetPosition.X - 3), tostring(targetPosition.Y - 3), tostring(targetPosition.Z - 3))
               }
               ThrowItemEvent:FireServer(unpack(args))
           end
       end

       RunService.Heartbeat:Connect(function()
           for _ = 1, 1 do
               snarp5845()
           end
       end)
   end,
})

Tab:CreateDivider()

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Furniture = require(ReplicatedStorage:WaitForChild("Shop_Furniture")).Assets
local AssetList = require(ReplicatedStorage:WaitForChild("AssetList"))
local PurchaseRemote = ReplicatedStorage:WaitForChild("FunctionConnections", 9e9)
    :WaitForChild("RequestPurchaseFromItemShop", 9e9)

local LoadedAssets = {}
local assetnames = {}

local selectedasset = nil
local quantityToBuy = 1

-- Load assets and build lookup by title
for _, v in pairs(Furniture) do
    local data = AssetList[v.AssetId]
    if data then
        local title = data.Title
        LoadedAssets[title] = v
        table.insert(assetnames, title)
    end
end

table.sort(assetnames, function(a,b) return a < b end)

local ListTab = Window:CreateTab("Furniture List")
ListTab:CreateSection("Buy the item you picked from the [Shop] tab.")
local ShopTab = Window:CreateTab("Shop")
ShopTab:CreateSection("Here you buy your selected furniture.")

-- Shop tab UI elements
local selectedAssetLabel = ShopTab:CreateLabel("Selected Asset: None")

local assetpriceLabel = ShopTab:CreateLabel("Asset Price: Unavailable")

local quantityDropdown = ShopTab:CreateDropdown({
    Name = "Quantity to Buy",
    Options = {"1", "10", "100"},
    CurrentOption = {"1"},
    MultipleOptions = false,
    Flag = "QuantityToBuy",
    Callback = function(option)
        quantityToBuy = tonumber(option[1]) or 1
    end,
})

local function PurchaseAsset(asset, times)
    times = times or 1
    if not asset then
        warn("No asset selected to purchase")
        return
    end

    local shopObjectId = asset.ObjectId or asset.ShopObjectId or asset.AssetId
    if not shopObjectId then
        warn("Selected asset missing valid ObjectId/ShopObjectId/AssetId")
        return
    end

    for _ = 1, times do
        coroutine.wrap(function()
            local success, err = pcall(function()
                local args = {
                    1, -- ShopId (assumed constant)
                    shopObjectId,
                    {
                        Quantity = 1,
                        CurrencyType = 1,
                        ColorId = 1,
                    }
                }
                PurchaseRemote:InvokeServer(unpack(args))
            end)
            if not success then
                warn("Failed to purchase:", err)
            end
        end)()
    end
end

ShopTab:CreateButton({
    Name = "Purchase Selected Asset",
    Callback = function()
        if selectedasset then
            PurchaseAsset(selectedasset, quantityToBuy)
        else
            warn("No asset selected!")
        end
    end,
})

-- Calculate total cost for "Purchase All"
local totalCost = 0
for _, asset in pairs(LoadedAssets) do
    if asset.Details and asset.Details.Price and asset.Details.Price.Coins then
        totalCost = totalCost + asset.Details.Price.Coins
    end
end

ShopTab:CreateButton({
    Name = "Purchase All Assets (" .. tostring(totalCost) .. " Coins)",
    Callback = function()
        for _, asset in pairs(LoadedAssets) do
            PurchaseAsset(asset, 1)
        end
    end,
})

ShopTab:CreateDivider()

ShopTab:CreateButton({
    Name = "Make Offsale Assets Available",
    Callback = function()
        if not onsaleran then
		onsaleran = true
		local function onsale(module)
			local fd = require(module)
			local id = 666
			fd.Categories[id] = {
				CategoryId = id,
				Image = 5277185610,
				CatTitle = "offsale ;)"

			}
			for i,v in pairs(fd.Assets) do
				if not fd.Assets[i].ForSale then
					fd.Assets[i].ForSale = true
					if fd.Assets[i].Details.Price.HalloweenCandy then
						fd.Assets[i].Details.Price.HalloweenCandy = nil
					end
					fd.Assets[i].CatId = id
					fd.Assets[i].Desc = "this is an offsale item that got brought back to life"
				end
			end
		end
		onsale(game.ReplicatedStorage:WaitForChild("Shop_Furniture"))
		onsale(game.ReplicatedStorage:WaitForChild("Shop_Toys"))
		onsale(game.ReplicatedStorage:WaitForChild("Shop_HomeImprovement"))
		onsale(game.ReplicatedStorage:WaitForChild("Shop_PetShop"))
	end
    end,
})

-- Create buttons on Assets List tab for each asset
for _, title in ipairs(assetnames) do
    ListTab:CreateButton({
        Name = title,
        Callback = function()
            selectedasset = LoadedAssets[title] -- use exact asset from lookup
            selectedAssetLabel:Set("Selected Asset: " .. title)

            if selectedasset.Details and selectedasset.Details.Price then
                local price = selectedasset.Details.Price.Coins or 0
                assetpriceLabel:Set("Asset Price: " .. tostring(price) .. " Coins")
            else
                assetpriceLabel:Set("Asset Price: Unavailable")
            end

            quantityDropdown:Set({"1"})
            quantityToBuy = 1
        end,
    })
end

-- Initialize first asset selection if any assets exist
if #assetnames > 0 then
    local first = assetnames[1]
    selectedasset = LoadedAssets[first]
    selectedAssetLabel:Set("Selected Asset: " .. first)
    if selectedasset and selectedasset.Details and selectedasset.Details.Price then
        local price = selectedasset.Details.Price.Coins or 0
        assetpriceLabel:Set("Asset Price: " .. tostring(price) .. " Coins")
    else
        assetpriceLabel:Set("Asset Price: Unavailable")
    end
end


local Tab = Window:CreateTab("Fishing") 

Tab:CreateToggle({
    Name = "Fishing Silent Aim",
    Flag = "FishingSilentAimToggle",
    Callback = function(b)
        if b then
            Constants.STATS.FISHCastObjectMinDistanceToCatch = 9999999
        else
            Constants.STATS.FISHCastObjectMinDistanceToCatch = 50
        end
    end
})

Tab:CreateToggle({
    Name = "Client Unlimited Bucket Size",
    Flag = "UnlimitedBucketSizeToggle",
    Callback = function(b)
        if b then
            Constants.STATS.FISHMaxAllowedInBucket = math.huge
        else
            Constants.STATS.FISHMaxAllowedInBucket = 20
        end
    end
})

local Section = Tab:CreateSection("give people rods")

local Button = Tab:CreateButton({
   Name = "Enable Inventory",
   Callback = function()
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
    game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true)
    game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, true)
   end,
})

local Button = Tab:CreateButton({
   Name = "Equip all fishing rod (Manual, Optional)",
   Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")

local function skrunkle3366()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character 
        end
    end
end

skrunkle3366()
   end,
})

local Button = Tab:CreateButton({
   Name = "Equip fishingrod (Manual, Optional)",
   Callback = function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local function bloop9998()
    ReplicatedStorage.Connection:InvokeServer(9, 0)
    wait(0.1) 

    ReplicatedStorage.Connection:InvokeServer(9, 1)

    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)
    
    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), 
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end

bloop9998()
   end,
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Toggle = false 


local function skrunkle3366()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character 
        end
    end
end


local function bloop9998()
    
    ReplicatedStorage.Connection:InvokeServer(9, 0) 
    wait(0.1) 

    
    ReplicatedStorage.Connection:InvokeServer(9, 1) 

    
    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)

    
    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), 
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end


local function chonk6643()
    while Toggle do
        
        for _ = 1, 1 do
            spawn(function() 
                skrunkle3366()
            end)

            spawn(function()
                bloop9998()
            end)
        end
        wait(0) 
    end
end

local Toggle = Tab:CreateToggle({
   Name = "Loop Equip FishingRods (No lag)",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(value)
  Toggle = value
        if Toggle then
            chonk6643() 
        end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Loop Drop Rods",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(value)
 rods = value 
        
        if rods then
            
            spawn(function()
                while rods do
                    
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
                    wait(0) 
                end
            end)
        end
   end,
})

local player = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local ws = game:GetService("Workspace")
local runService = game:GetService("RunService")
local vim = game:GetService("VirtualInputManager")

local char = player.Character or player.CharacterAdded:Wait()
local bp = player:WaitForChild("Backpack")
local conn = rs:WaitForChild("Connection")
local connEvent = rs:WaitForChild("ConnectionEvent")

local running = false
local steppedConn, spinObj

function skrunkle3366()
    for _, tool in pairs(bp:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = char
        end
    end
end

function bloop9998()
    conn:InvokeServer(9, 0)
    task.wait(0.1)
    conn:InvokeServer(9, 1)
    conn:InvokeServer(49)
    conn:InvokeServer(50)
    conn:InvokeServer(51)

    conn:InvokeServer(11, {
        FishingPolePos = ws.TempFish.Position,
        Power = math.random(),
        Face = ws.TempFish.Position,
        PlayerPos = ws.TempFish.Position,
        FishingZonePos = Vector3.new(-5.29345703, -18.0412292, 43.7173767)
    })
end

function gnarp8248()
    while running do
        conn:InvokeServer(202, 1310, {Position = Vector3.new(0, -15, 100)})
        conn:InvokeServer(201, 1310, {})
        task.wait(1.5)
    end
end

function draz4727()
    while running do
        task.spawn(skrunkle3366)
        task.spawn(bloop9998)
        task.spawn(function()
            vim:SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
        end)
        task.wait(0)
    end
end

function zibble2392()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    for _, v in pairs(hrp:GetChildren()) do
        if v.Name == "Spinning" then
            v:Destroy()
        end
    end

    spinObj = Instance.new("BodyAngularVelocity")
    spinObj.Name = "Spinning"
    spinObj.Parent = hrp
    spinObj.MaxTorque = Vector3.new(0, math.huge, 0)
    spinObj.AngularVelocity = Vector3.new(0, 20, 0)
end

function duh7977()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    for _, v in pairs(hrp:GetChildren()) do
        if v.Name == "Spinning" then
            v:Destroy()
        end
    end
    spinObj = nil
end

Tab:CreateToggle({
    Name = "RAID SERVER (INCREASE PING)",
    CurrentValue = false,
    Flag = "MegaToggleSpin",
    Callback = function(val)
        running = val
        if running then
            task.spawn(draz4727)
            task.spawn(gnarp8248)
            zibble2392()
            steppedConn = runService.Stepped:Connect(function()
                if running then
                    connEvent:FireServer(210)
                end
            end)
        else
            if steppedConn then steppedConn:Disconnect() steppedConn = nil end
            duh7977()
        end
    end
})


local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Toggle = false 
local lagrods = false 

local function skrunkle3366()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character 
        end
    end
end

local function bloop9998()
    ReplicatedStorage.Connection:InvokeServer(9, 0)
    wait(0.1)

    ReplicatedStorage.Connection:InvokeServer(9, 1)

    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)

    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), 
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end


local function chonk6643()
    while Toggle do
        
        for _ = 1, 1000 do
            spawn(function() 
                skrunkle3366()
            end)

            spawn(function()
                bloop9998()
            end)
        end
        wait(0) 
    end
end

local Button = Tab:CreateButton({
   Name = "LAG SERVER",
   Callback = function()
 
        
        lagrods = true
        spawn(function()
            while lagrods do
                
                game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
                wait(1) 
            end
        end)

        
        Toggle = true
        chonk6643() 
   end,
})

Tab:CreateSection("Auto farm and sell fishes in playground.")

local antiAFK = false
local Button = Tab:CreateButton({
   Name = "Anti AFK",
   Callback = function()
 antiAFK = not antiAFK
    if antiAFK then
   local player = game.Players.LocalPlayer
local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"

game.StarterGui:SetCore("SendNotification", {
    Title = "Anti AFK",
    Text = "Anti-AFK enabled",
    Icon = playerHeadIcon,
    Duration = 3,
    Button1 = "ok"
})
        local vu = game:GetService("VirtualUser")
        game.Players.LocalPlayer.Idled:Connect(function()
            vu:CaptureController()
            vu:ClickButton2(Vector2.new(0, 0))
        end)
    else
     local player = game.Players.LocalPlayer
local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        game.StarterGui:SetCore("SendNotification", {
    Title = "Anti AFK",
    Text = "Anti-AFK disabled (requires rejoin to reset Idled connection)",
    Icon = playerHeadIcon,
    Duration = 3,
    Button1 = "nigga"
})
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Start Farming",
   Callback = function()
 while true do
    
    local args1 = { [1] = 10 }
    game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(unpack(args1))

    
    local args2 = {
        [1] = 11,
        [2] = {
            ["Power"] = 1,
            ["FishingZonePos"] = Vector3.new(82.066064453125, -18.149871826171875, 96.40253448486328),
            ["Face"] = Vector3.new(0.9990392923355103, 0.005603702738881111, -0.04346461594104767),
            ["PlayerPos"] = Vector3.new(62.121219635009766, -12.388772010803223, 93.4290542602539),
            ["FishingPolePos"] = Vector3.new(64.75240325927734, -5.818235397338867, 94.7131118774414)
        }
    }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

    
    local args3 = { [1] = 49 }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args3))

    
    local args4 = { [1] = 10 }
    game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(unpack(args4))

    
    local args5 = { [1] = 50 }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args5))

    
    local args6 = { [1] = 51 }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args6))

    
    local args7 = { [1] = 9, [2] = 23 }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args7))

    
    wait(0)  
end
   end,
})

local Tab = Window:CreateTab("Reckless") 
Tab:CreateSection("Freinds")
Tab:CreateButton({
    Name = "Friend Request All",
    Callback = function()
-- Script generated by SimpleSpy - credits to exx#9394
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

for _, player in ipairs(Players:GetPlayers()) do
    -- Get Player Status
    local statusArgs = {
        [1] = player.UserId
    }
    ReplicatedStorage.FunctionConnections.RequestPlayerStatusResponseForUserId:InvokeServer(unpack(statusArgs))

    -- Get Player Bio
    local bioArgs = {
        [1] = player.UserId
    }
    ReplicatedStorage.FunctionConnections.RequestPlayerBioForUserId:InvokeServer(unpack(bioArgs))

    -- Send Friend Request
    local friendArgs = {
        [1] = player
    }
    ReplicatedStorage.FunctionConnections.RequestSendFriendRequest:InvokeServer(unpack(friendArgs))
end

    end
})

Tab:CreateButton({
    Name = "Unfriend All",
    Callback = function()
        local player = Players.LocalPlayer
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") and character.Humanoid:FindFirstChild("HumanoidDescription") then
            gloob7010(zibble5019(character.Humanoid.HumanoidDescription), player.DisplayName)
        end
    end
})

Tab:CreateButton({
    Name = "Request Teleport Notification To All Friends",
    Callback = function()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function requestForAllPlayers()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            -- Request Player Status
            local statusArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestPlayerStatusResponseForUserId:InvokeServer(unpack(statusArgs))

            -- Request Player Bio
            local bioArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestPlayerBioForUserId:InvokeServer(unpack(bioArgs))

            -- Request Player Location
            local locationArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestPlayerLocationForUserId:InvokeServer(unpack(locationArgs))

            -- Request Invite from Friend
            local inviteArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestInviteFromFriend:InvokeServer(unpack(inviteArgs))
        end
        wait(2) -- Safe delay between requests
    end
end

-- Call this function to start the loop
requestForAllPlayers()
    end
})

Tab:CreateButton({
    Name = "Invite All Friends To Your Server",
    Callback = function()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function sendInviteToAllPlayers()
    while true do
        for _, player in ipairs(Players:GetPlayers()) do
            -- Request Player Status
            local statusArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestPlayerStatusResponseForUserId:InvokeServer(unpack(statusArgs))

            -- Request Player Bio
            local bioArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestPlayerBioForUserId:InvokeServer(unpack(bioArgs))

            -- Request Player Location
            local locationArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestPlayerLocationForUserId:InvokeServer(unpack(locationArgs))

            -- Request Invite from Friend
            local inviteFromArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestInviteFromFriend:InvokeServer(unpack(inviteFromArgs))

            -- New action: Send Invite to Friend
            local sendInviteArgs = { [1] = player.UserId }
            ReplicatedStorage.FunctionConnections.RequestSendInviteToFriend:InvokeServer(unpack(sendInviteArgs))
        end
        wait(2) -- Safe delay between requests
    end
end

-- Call this function to start the loop
sendInviteToAllPlayers()
    end
})

Tab:CreateSection("Balloon Spawner")

local Dropdown = Tab:CreateDropdown({
   Name = "Select balloon",  
   Options = {"Red", "Blue", "Green", "Purple", "White", "Heart"},  
   CurrentOption = {"Red"},  
   MultipleOptions = false,  
   Flag = "BalloonColor",  
   Callback = function(Options)
      
      ballcolor = Options[1]
   end,
})

Tab:CreateToggle({
   Name = "Start spawning balloon type",  
   CurrentValue = false,  
   Flag = "spawnballs",  
   Callback = function(Value)
      
      spawnballs = Value

      if spawnballs then
         
         task.spawn(function()
            while spawnballs do
               
               local balloonID
               if ballcolor == "Red" then
                  balloonID = 1311
               elseif ballcolor == "Blue" then
                  balloonID = 1312
               elseif ballcolor == "Green" then
                  balloonID = 1313
               elseif ballcolor == "Purple" then
                  balloonID = 1314
               elseif ballcolor == "White" then
                  balloonID = 1315
               elseif ballcolor == "Heart" then
                  balloonID = 1039  
               end

               
               local args = {
                  [1] = 201,
                  [2] = balloonID,
                  [3] = {}
               }

               local args2 = {
                  [1] = 202
               }

               game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
               game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

               task.wait(0)  
            end
         end)
      end
   end,
})

local allballs = false 

Tab:CreateToggle({
   Name = "Spawn all balloons",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
    allballs = Value 

		if allballs then
			
			task.spawn(function()
				while allballs do
					
					local args = {
						[1] = 201,
						[2] = 1311,
						[3] = {}
					}
					local args2 = {
						[1] = 202
					}
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1312
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1313
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1314
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1315
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1039
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					task.wait(0) 
				end
			end)
		end
   end,
})

local Tab = Window:CreateTab("Extras")
local Section = Tab:CreateSection("change some settings for meepcity here.")
local StarterGui = game:GetService("StarterGui")
local splorg6741 = {}

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local jorkin = false
local track = nil

local function bleh2621(char)
    return char and char:FindFirstChildOfClass("Humanoid") and char:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R15
end

local anim = Instance.new("Animation")
anim.AnimationId = bleh2621(character) and "rbxassetid://698251653" or "rbxassetid://72042024"

local function duh7810()
    jorkin = false
    if track then
        track:Stop()
        track = nil
    end
end

local function skrunkle1059()
    if not humanoid then return end
    if not track then
        track = humanoid:LoadAnimation(anim)
    end
    jorkin = true
    while jorkin do
        if not track then break end
        track:Play()
        track:AdjustSpeed(bleh2621(character) and 0.7 or 0.65)
        track.TimePosition = 0.6
        task.wait(0.1)
        while track and track.TimePosition < (bleh2621(character) and 0.7 or 0.65) and jorkin do
            task.wait(0.1)
        end
        if track then
            track:Stop()
        end
    end
end

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")

    humanoid.Died:Connect(duh7810)

    anim.AnimationId = bleh2621(character) and "rbxassetid://698251653" or "rbxassetid://72042024"

    if jorkin then
        task.wait(1)
        task.spawn(skrunkle1059)
    end
end)

humanoid.Died:Connect(duh7810)

local Toggle = Tab:CreateToggle({
    Name = "Jerk Off",
    CurrentValue = false,
    Flag = "Toggle_JerkOff",
    Callback = function(Value)
        if Value then
            task.spawn(skrunkle1059)
        else
            duh7810()
        end
    end,
})

local muglug2759 = {}

local Toggle = Tab:CreateToggle({
    Name = "Mute boomboxes",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            
            local vw = workspace:FindFirstChild("VW")
            if vw then
                for _, item in pairs(vw:GetDescendants()) do
                    if item:IsA("Model") or item:IsA("Part") then
                        if item.Name == "BoomBox" then
                            local sound = item:FindFirstChildOfClass("Sound")
                            if sound then
                                table.insert(muglug2759, {
                                    parent = item,
                                    sound = sound:Clone() 
                                })
                                sound:Destroy()
                            end
                        end
                    end
                end
            end
        else
            
            for _, data in pairs(muglug2759) do
                if data.parent and data.parent:IsDescendantOf(workspace) then
                    data.sound.Parent = data.parent
                end
            end
            muglug2759 = {} 
        end
    end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spoof PLUS/BOOMBOX/CANDYPACK",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
      if Value then
        game.Players.LocalPlayer:SetAttribute("PLUS",true)
game.Players.LocalPlayer:SetAttribute("BoomBox",true)
game.Players.LocalPlayer:SetAttribute("CandyPack",true)
      else
         game.Players.LocalPlayer:SetAttribute("PLUS", false)
         game.Players.LocalPlayer:SetAttribute("BoomBox", false)
         game.Players.LocalPlayer:SetAttribute("CandyPack",false)
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Remove sparklers (no lag when people use it)",
   CurrentValue = false,
   Flag = "ToggleSparkler",
   Callback = function(Value)
       draz9251 = Value
       
       if draz9251 then
           
           local function dih6037()
               for _, obj in ipairs(workspace:GetDescendants()) do
                   if obj:IsA("Model") or obj:IsA("Part") then
                       if obj.Name == "Sparkler" then
                           obj:Destroy()
                       end
                   end
               end
           end
           
           
           dih6037()
           
           
           connection = workspace.DescendantAdded:Connect(function(obj)
               if obj.Name == "Sparkler" then
                   obj:Destroy()
               end
           end)
       else
           
           if connection then
               connection:Disconnect()
               connection = nil
           end
       end
   end,
})

local areniggasenabled = false
local drunkniggas = nil


local function snarp3630()
    if areniggasenabled then
        local playerCount = #game.Players:GetPlayers()
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Count",
            Text = "There are currently " .. playerCount .. " players in the game.",
            Icon = "rbxassetid://130225201432137",  
            Duration = 5
        })
    end
end


local Toggle = Tab:CreateToggle({
   Name = "Real time player count in server",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(value)
  areniggasenabled = value

        
        if areniggasenabled then
            
            snarp3630()

            
            game.Players.PlayerAdded:Connect(function(player)
                if areniggasenabled then
                    snarp3630()  
                end
            end)

            game.Players.PlayerRemoving:Connect(function(player)
                if areniggasenabled then
                    snarp3630()  
                end
            end)
        end
   end,
})


game.Players.PlayerAdded:Connect(function(player)
    if areniggasenabled then
        local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Joined",
            Text = player.Name .. " has joined the game.",
            Icon = playerHeadIcon,
            Duration = 5
        })
    end
end)

game.Players.PlayerRemoving:Connect(function(player)
    if areniggasenabled then
        local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Left",
            Text = player.Name .. " has left the game.",
            Icon = playerHeadIcon,
            Duration = 5
        })
    end
end)

local Button = Tab:CreateButton({
   Name = "Make yourself slide",
   Callback = function()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")
local hum = char:WaitForChild("Humanoid")

local sliding = false
local velocity = Vector3.zero
local niggasgoing = 1

for _, part in ipairs(char:GetDescendants()) do
    if part:IsA("BasePart") then
        part.CustomPhysicalProperties = PhysicalProperties.new(0.03, 0, 0, 0, 0)
    end
end

RunService.Heartbeat:Connect(function()
    if sliding then
        local cam = workspace.CurrentCamera
        local moveDir = Vector3.zero

        if UIS:IsKeyDown(Enum.KeyCode.W) then moveDir += cam.CFrame.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.S) then moveDir -= cam.CFrame.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.A) then moveDir -= cam.CFrame.RightVector end
        if UIS:IsKeyDown(Enum.KeyCode.D) then moveDir += cam.CFrame.RightVector end

        moveDir = Vector3.new(moveDir.X, 0, moveDir.Z).Unit
        if moveDir.Magnitude > 0 then
            velocity = moveDir * niggasgoing
        else
            velocity *= 0.975
        end

        hrp.Velocity = Vector3.new(velocity.X, hrp.Velocity.Y, velocity.Z)
    end
end)

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.LeftShift then
        sliding = not sliding
        if not sliding then
            velocity = Vector3.zero
        end
    end
end)

   end,
})

Tab:CreateSection("fake coins (you can type text)")

_G.startcoins = false

local Toggle = Tab:CreateToggle({
    Name = "Generate Coins (ONLY VISUAL)",
    CurrentValue = false,
    Flag = "GenerateCoinsToggle",
    Callback = function(value)
        _G.startcoins = value
    end
})

spawn(function()
    while true do
        if _G.startcoins then
            local player = game:GetService("Players").LocalPlayer
            if player then
                local currentCoins = player:GetAttribute("Coins") or 0
                player:SetAttribute("Coins", currentCoins + 15000)
            end
        end
        wait(0.09)
    end
end)

local Input = Tab:CreateInput({
   Name = "Meep Coins",
   CurrentValue = "",
   PlaceholderText = "money amount",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
      
      local text = tostring(Value)

      game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CoinsContainer.Container.Amount.Text = text
      game:GetService("Players").SlayerssUnleashedd.PlayerGui.ShopGui.Background.Content.Main.TopContainer.CoinsContainer.TotalCoins.Text = text
      game:GetService("Players").SlayerssUnleashedd.PlayerGui.ScreenGui.ItemShop.ShopContent.TopBar.ButtonBuyCoins.CoinAmount.Text = text
   end,
})

local Button = Tab:CreateButton({
   Name = "Infinite Money",
   Callback = function()
      game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CoinsContainer.Container.Amount.Text = math.huge
      game:GetService("Players").SlayerssUnleashedd.PlayerGui.ShopGui.Background.Content.Main.TopContainer.CoinsContainer.TotalCoins.Text = math.huge
      game:GetService("Players").SlayerssUnleashedd.PlayerGui.ScreenGui.ItemShop.ShopContent.TopBar.ButtonBuyCoins.CoinAmount.Text = math.huge
   end,
})

local Section = Tab:CreateSection("other stuff")

local FLYING = false

local function zorp4273()
    FLYING = true
    repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    local T = game.Players.LocalPlayer.Character.PrimaryPart
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local SPEED = 0
    local BG = Instance.new('BodyGyro')
    local BV = Instance.new('BodyVelocity')

    BG.P = 9e4
    BG.Parent = T
    BV.Parent = T
    BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    BG.cframe = T.CFrame
    BV.velocity = Vector3.new(0, 0, 0)
    BV.maxForce = Vector3.new(9e9, 9e9, 9e9)

    local userInputService = game:GetService("UserInputService")

    local humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    humanoid.PlatformStand = true

    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 1 end
            if input.KeyCode == Enum.KeyCode.S then CONTROL.B = -1 end
            if input.KeyCode == Enum.KeyCode.A then CONTROL.L = -1 end
            if input.KeyCode == Enum.KeyCode.D then CONTROL.R = 1 end
            if input.KeyCode == Enum.KeyCode.Space then CONTROL.E = 1 end
            if input.KeyCode == Enum.KeyCode.LeftControl then CONTROL.Q = -1 end
        end
    end)

    userInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 0 end
            if input.KeyCode == Enum.KeyCode.S then CONTROL.B = 0 end
            if input.KeyCode == Enum.KeyCode.A then CONTROL.L = 0 end
            if input.KeyCode == Enum.KeyCode.D then CONTROL.R = 0 end
            if input.KeyCode == Enum.KeyCode.Space then CONTROL.E = 0 end
            if input.KeyCode == Enum.KeyCode.LeftControl then CONTROL.Q = 0 end
        end
    end)

    task.spawn(function()
    while FLYING do
        task.wait()

        
        local cam = workspace.CurrentCamera
        local forward = cam.CFrame.LookVector
        local right = cam.CFrame.RightVector
        local up = Vector3.new(0, 1, 0)

        
        local moveDir = (forward * (CONTROL.F + CONTROL.B)) + (right * (CONTROL.R + CONTROL.L)) + (up * (CONTROL.E + CONTROL.Q))
        if moveDir.Magnitude > 0 then
            moveDir = moveDir.Unit
            SPEED = 50
        else
            SPEED = 0
        end

        BV.Velocity = moveDir * SPEED
        BG.CFrame = cam.CFrame
    end

    
    BG:Destroy()
    BV:Destroy()
    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    humanoid.PlatformStand = false
end)

end

local function chonk4891()
    FLYING = false
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = game.Players.LocalPlayer.Character.Humanoid
        humanoid.PlatformStand = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end

getgenv().WalkSpeedValue = 25
local BunnyHopActive = false
local BunnyHopConnection

local Player = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local Humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") or Player.CharacterAdded:Wait():WaitForChild("Humanoid")

RunService.Heartbeat:Connect(function()
    if BunnyHopActive and Humanoid.WalkSpeed ~= getgenv().WalkSpeedValue then
        Humanoid.WalkSpeed = getgenv().WalkSpeedValue
    end
end)

getgenv().WalkSpeedValue = 25
local BunnyHopActive = false
local BunnyHopConnection

local Player = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local Humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") or Player.CharacterAdded:Wait():WaitForChild("Humanoid")

RunService.Heartbeat:Connect(function()
    if BunnyHopActive and Humanoid.WalkSpeed ~= getgenv().WalkSpeedValue then
        Humanoid.WalkSpeed = getgenv().WalkSpeedValue
    end
end)

local FlyToggle = Tab:CreateToggle({
    Name = "Fly/Unfly",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(Value)
        if Value then
            if FLYING == false then
                zorp4273()
            end
        else
            if FLYING == true then
                chonk4891()
            end
        end
    end,
})


local FlyKeybind = Tab:CreateKeybind({
    Name = "Fly keybind",
    CurrentKeybind = "F", 
    HoldToInteract = false,
    Flag = "FlyKeybind", 
    Callback = function(Keybind)
        if FLYING then
            chonk4891()
        else
            zorp4273()
        end
    end,
})

local Input = Tab:CreateInput({
   Name = "Walkspeed",
   CurrentValue = "",
   PlaceholderText = "enter walkspeed",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
   getgenv().WalkSpeedValue = Value; 
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'WalkSpeed':Connect(function()
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
end)
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
   end,
})

local Input = Tab:CreateInput({
   Name = "Max Camera Zoom",
   CurrentValue = "",
   PlaceholderText = "enter zoom",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
        game.Players.LocalPlayer.CameraMaxZoomDistance = (Value)

   end,
})

local Input = Tab:CreateInput({
   Name = "Jumppower",
   CurrentValue = "",
   PlaceholderText = "enter jumppower",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
 getgenv().JumpPowerValue = Value; 
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'JumpPower':Connect(function()
Player.Character.Humanoid.JumpPower = getgenv().JumpPowerValue;
end)
Player.Character.Humanoid.JumpPower = getgenv().JumpPowerValue;
   end,
})

local Input = Tab:CreateInput({
   Name = "FOV (Original = 70)",
   CurrentValue = "",
   PlaceholderText = "enter FOV",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
        game.Players.LocalPlayer.CameraMaxZoomDistance = (Value)

   end,
})

Tab:CreateDivider()

Tab:CreateButton({
   Name = "CS Resoluiton",
   Callback = function()
   getgenv().Resolution = {
    [".gg/scripters"] = 0.7
}

local Camera = workspace.CurrentCamera
if getgenv().gg_scripters == nil then
    game:GetService("RunService").RenderStepped:Connect(
        function()
            Camera.CFrame = Camera.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().Resolution[".gg/scripters"], 0, 0, 0, 1)
        end
    )
end
getgenv().gg_scripters = "Aori0001"
   end,
})

Tab:CreateButton({
   Name = "Firework Fling",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/rolezeay/fireworkfilng/refs/heads/main/hmmm"))() 
   end,
})

Tab:CreateButton({
   Name = "Chat Mimicker",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/rolezeay/chatmimicker/refs/heads/main/hmmm"))() 
   end,
})

Tab:CreateButton({
   Name = "E to rewind character",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/zynlope/qkjtkqjwkrjqr/refs/heads/main/hmmmmmm"))() 
   end,
})

Tab:CreateButton({
   Name = "Chat Logger",
   Callback = function()
loadstring(game:HttpGet("http://raw.githubusercontent.com/zynlope/askgjuqkwjru-oq/refs/heads/main/hmmmmmm"))() 
   end,
})

Tab:CreateButton({
   Name = "Midnight Mode",
   Callback = function()
 local Lighting = game:GetService("Lighting")
        Lighting.ClockTime = 24
        Lighting.Ambient = Color3.fromRGB(50, 50, 50)
        Lighting.OutdoorAmbient = Color3.fromRGB(50, 50, 50)
        Lighting.FogColor = Color3.fromRGB(0, 0, 0)
        Lighting.FogEnd = 500
        Lighting.Brightness = 1.0
    end,
})
